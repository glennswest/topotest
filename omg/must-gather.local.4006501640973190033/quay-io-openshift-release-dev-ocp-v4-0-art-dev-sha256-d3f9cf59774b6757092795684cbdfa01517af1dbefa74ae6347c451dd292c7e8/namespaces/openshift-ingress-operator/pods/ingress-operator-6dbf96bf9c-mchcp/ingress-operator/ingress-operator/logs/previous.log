2023-05-04T16:32:06.309916358Z 2023-05-04T16:32:06.309Z	INFO	operator.main	ingress-operator/start.go:64	using operator namespace	{"namespace": "openshift-ingress-operator"}
2023-05-04T16:32:07.360529590Z I0504 16:32:07.360492       1 request.go:682] Waited for 1.035740857s due to client-side throttling, not priority and fairness, request: GET:https://172.30.0.1:443/apis/ingress.operator.openshift.io/v1?timeout=32s
2023-05-04T16:32:12.537971144Z 2023-05-04T16:32:12.537Z	INFO	operator.main	ingress-operator/start.go:64	registering Prometheus metrics for canary_controller
2023-05-04T16:32:12.538016700Z 2023-05-04T16:32:12.538Z	INFO	operator.main	ingress-operator/start.go:64	registering Prometheus metrics for ingress_controller
2023-05-04T16:32:12.538023733Z 2023-05-04T16:32:12.538Z	INFO	operator.main	ingress-operator/start.go:64	registering Prometheus metrics for route_metrics_controller
2023-05-04T16:32:12.538109043Z 2023-05-04T16:32:12.538Z	INFO	operator.main	ingress-operator/start.go:64	watching file	{"filename": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"}
2023-05-04T16:32:12.540408728Z 2023-05-04T16:32:12.540Z	INFO	operator.init	runtime/asm_amd64.s:1594	starting metrics listener	{"addr": "127.0.0.1:60000"}
2023-05-04T16:32:17.389323754Z I0504 16:32:17.389288       1 request.go:682] Waited for 2.399069582s due to client-side throttling, not priority and fairness, request: GET:https://172.30.0.1:443/apis/operators.coreos.com/v2?timeout=32s
2023-05-04T16:32:18.740627155Z 2023-05-04T16:32:18.740Z	INFO	operator.init.controller-runtime.metrics	manager/manager.go:391	Metrics server is starting to listen	{"addr": ":8080"}
2023-05-04T16:32:18.741202885Z I0504 16:32:18.741189       1 base_controller.go:67] Waiting for caches to sync for spread-default-router-pods
2023-05-04T16:32:18.844914441Z I0504 16:32:18.844430       1 base_controller.go:73] Caches are synced for spread-default-router-pods 
2023-05-04T16:32:18.844914441Z I0504 16:32:18.844443       1 base_controller.go:110] Starting #1 worker of spread-default-router-pods controller ...
2023-05-04T16:32:24.953011419Z 2023-05-04T16:32:24.952Z	INFO	operator.init	runtime/asm_amd64.s:1594	Starting server	{"path": "/metrics", "kind": "metrics", "addr": "[::]:8080"}
2023-05-04T16:32:25.054215560Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "status_controller", "source": "kind source: *v1.IngressController"}
2023-05-04T16:32:25.054279651Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "status_controller", "source": "kind source: *v1.ClusterOperator"}
2023-05-04T16:32:25.054305369Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "configurable_route_controller", "source": "kind source: *v1.Ingress"}
2023-05-04T16:32:25.054320848Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "status_controller"}
2023-05-04T16:32:25.054512788Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "configurable_route_controller", "source": "&{{%!s(*v1.Role=&{{ } {      0 {{0 0 <nil>}} <nil> <nil> map[] map[] [] [] []} []}) %!s(*cache.multiNamespaceCache=&{map[openshift-config:0xc000125760 openshift-config-managed:0xc000125758 openshift-ingress:0xc000125748 openshift-ingress-canary:0xc000125750 openshift-ingress-operator:0xc000125738] 0xc0002d0f50 0xc0008ae370 0xc000125730}) %!s(chan error=<nil>) %!s(func()=<nil>)}}"}
2023-05-04T16:32:25.054524019Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "configurable_route_controller", "source": "&{{%!s(*v1.RoleBinding=&{{ } {      0 {{0 0 <nil>}} <nil> <nil> map[] map[] [] [] []} [] {  }}) %!s(*cache.multiNamespaceCache=&{map[openshift-config:0xc000125760 openshift-config-managed:0xc000125758 openshift-ingress:0xc000125748 openshift-ingress-canary:0xc000125750 openshift-ingress-operator:0xc000125738] 0xc0002d0f50 0xc0008ae370 0xc000125730}) %!s(chan error=<nil>) %!s(func()=<nil>)}}"}
2023-05-04T16:32:25.054537625Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "configurable_route_controller"}
2023-05-04T16:32:25.054551991Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "ingress_controller", "source": "kind source: *v1.IngressController"}
2023-05-04T16:32:25.054579774Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "ingress_controller", "source": "kind source: *v1.Deployment"}
2023-05-04T16:32:25.054604841Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "ingress_controller", "source": "kind source: *v1.Service"}
2023-05-04T16:32:25.054628235Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "ingress_controller", "source": "kind source: *v1.Pod"}
2023-05-04T16:32:25.054656588Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "ingress_controller", "source": "kind source: *v1.DNS"}
2023-05-04T16:32:25.054679391Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "ingress_controller", "source": "kind source: *v1.DNSRecord"}
2023-05-04T16:32:25.054703355Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "ingress_controller", "source": "kind source: *v1.Ingress"}
2023-05-04T16:32:25.054724315Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "ingress_controller"}
2023-05-04T16:32:25.054783215Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "error_page_configmap_controller", "source": "kind source: *v1.IngressController"}
2023-05-04T16:32:25.054783215Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "error_page_configmap_controller", "source": "kind source: *v1.ConfigMap"}
2023-05-04T16:32:25.054791020Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "error_page_configmap_controller", "source": "kind source: *v1.ConfigMap"}
2023-05-04T16:32:25.054796009Z 2023-05-04T16:32:25.054Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "error_page_configmap_controller"}
2023-05-04T16:32:25.055458312Z 2023-05-04T16:32:25.055Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "certificate_controller", "source": "kind source: *v1.IngressController"}
2023-05-04T16:32:25.055458312Z 2023-05-04T16:32:25.055Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "certificate_controller"}
2023-05-04T16:32:25.055647837Z 2023-05-04T16:32:25.055Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "clientca_configmap_controller", "source": "kind source: *v1.IngressController"}
2023-05-04T16:32:25.055647837Z 2023-05-04T16:32:25.055Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "clientca_configmap_controller", "source": "kind source: *v1.ConfigMap"}
2023-05-04T16:32:25.055657586Z 2023-05-04T16:32:25.055Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "clientca_configmap_controller", "source": "kind source: *v1.ConfigMap"}
2023-05-04T16:32:25.055657586Z 2023-05-04T16:32:25.055Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "clientca_configmap_controller"}
2023-05-04T16:32:25.056766897Z 2023-05-04T16:32:25.056Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "dns_controller", "source": "kind source: *v1.DNSRecord"}
2023-05-04T16:32:25.056805950Z 2023-05-04T16:32:25.056Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "dns_controller", "source": "kind source: *v1.DNS"}
2023-05-04T16:32:25.056832851Z 2023-05-04T16:32:25.056Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "dns_controller", "source": "kind source: *v1.Infrastructure"}
2023-05-04T16:32:25.056856395Z 2023-05-04T16:32:25.056Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "dns_controller", "source": "kind source: *v1.Secret"}
2023-05-04T16:32:25.056876873Z 2023-05-04T16:32:25.056Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "dns_controller"}
2023-05-04T16:32:25.057243231Z 2023-05-04T16:32:25.057Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "certificate_publisher_controller", "source": "informer source: 0xc000125bf8"}
2023-05-04T16:32:25.057330605Z 2023-05-04T16:32:25.057Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "certificate_publisher_controller", "source": "kind source: *v1.IngressController"}
2023-05-04T16:32:25.057357275Z 2023-05-04T16:32:25.057Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "certificate_publisher_controller"}
2023-05-04T16:32:25.057518698Z 2023-05-04T16:32:25.057Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "crl", "source": "informer source: 0xc000125e40"}
2023-05-04T16:32:25.057623575Z 2023-05-04T16:32:25.057Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "canary_controller", "source": "kind source: *v1.IngressController"}
2023-05-04T16:32:25.057650064Z 2023-05-04T16:32:25.057Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "canary_controller", "source": "kind source: *v1.Route"}
2023-05-04T16:32:25.057670182Z 2023-05-04T16:32:25.057Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "canary_controller"}
2023-05-04T16:32:25.058052680Z 2023-05-04T16:32:25.058Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "ingressclass_controller", "source": "kind source: *v1.IngressController"}
2023-05-04T16:32:25.058084880Z 2023-05-04T16:32:25.058Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "ingressclass_controller", "source": "kind source: *v1.IngressClass"}
2023-05-04T16:32:25.058105579Z 2023-05-04T16:32:25.058Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "ingressclass_controller"}
2023-05-04T16:32:25.058203363Z 2023-05-04T16:32:25.058Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "route_metrics_controller", "source": "kind source: *v1.IngressController"}
2023-05-04T16:32:25.058248597Z 2023-05-04T16:32:25.058Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "route_metrics_controller", "source": "&{{%!s(*v1.Route=&{{ } {      0 {{0 0 <nil>}} <nil> <nil> map[] map[] [] [] []} {   {  <nil>} [] <nil> <nil> } {[]}}) %!s(*cache.informerCache=&{0xc00047db00}) %!s(chan error=<nil>) %!s(func()=<nil>)}}"}
2023-05-04T16:32:25.058269947Z 2023-05-04T16:32:25.058Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "route_metrics_controller"}
2023-05-04T16:32:25.058366208Z 2023-05-04T16:32:25.058Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:32:25.059872965Z 2023-05-04T16:32:25.059Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "crl", "source": "informer source: 0xc000125e40"}
2023-05-04T16:32:25.059933929Z 2023-05-04T16:32:25.059Z	INFO	operator.init	controller/controller.go:241	Starting EventSource	{"controller": "crl", "source": "kind source: *v1.IngressController"}
2023-05-04T16:32:25.059941093Z 2023-05-04T16:32:25.059Z	INFO	operator.init	controller/controller.go:241	Starting Controller	{"controller": "crl"}
2023-05-04T16:32:27.408567117Z I0504 16:32:27.408536       1 request.go:682] Waited for 2.343159146s due to client-side throttling, not priority and fairness, request: GET:https://172.30.0.1:443/apis/helm.openshift.io/v1beta1?timeout=32s
2023-05-04T16:32:31.259907598Z 2023-05-04T16:32:31.259Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "failed to get restmapping: no matches for kind \"Route\" in group \"route.openshift.io\""}
2023-05-04T16:32:31.260921861Z 2023-05-04T16:32:31.260Z	INFO	operator.ingress_controller	handler/enqueue_mapped.go:80	queueing ingresscontroller	{"name": "default", "related": ""}
2023-05-04T16:32:31.260921861Z 2023-05-04T16:32:31.260Z	INFO	operator.ingress_controller	handler/enqueue_mapped.go:80	queueing ingresscontroller	{"name": "default", "related": ""}
2023-05-04T16:32:31.262176425Z 2023-05-04T16:32:31.261Z	INFO	operator.certificate_publisher_controller	handler/enqueue_mapped.go:80	queueing ingresscontroller	{"name": "default"}
2023-05-04T16:32:31.462233315Z 2023-05-04T16:32:31.462Z	INFO	operator.init	controller/controller.go:241	Starting workers	{"controller": "certificate_controller", "worker count": 1}
2023-05-04T16:32:31.462315789Z 2023-05-04T16:32:31.462Z	INFO	operator.certificate_controller	controller/controller.go:121	Reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:32:31.462490998Z 2023-05-04T16:32:31.462Z	INFO	operator.init	controller/controller.go:241	Starting workers	{"controller": "status_controller", "worker count": 1}
2023-05-04T16:32:31.462530242Z 2023-05-04T16:32:31.462Z	INFO	operator.init	controller/controller.go:241	Starting workers	{"controller": "certificate_publisher_controller", "worker count": 1}
2023-05-04T16:32:31.462530242Z 2023-05-04T16:32:31.462Z	INFO	operator.status_controller	controller/controller.go:121	Reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:32:31.462572711Z 2023-05-04T16:32:31.462Z	INFO	operator.certificate_publisher_controller	controller/controller.go:121	Reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:32:31.463015091Z 2023-05-04T16:32:31.462Z	INFO	operator.init	controller/controller.go:241	Starting workers	{"controller": "error_page_configmap_controller", "worker count": 1}
2023-05-04T16:32:31.464847860Z 2023-05-04T16:32:31.464Z	INFO	operator.init	controller/controller.go:241	Starting workers	{"controller": "crl", "worker count": 1}
2023-05-04T16:32:31.569576755Z 2023-05-04T16:32:31.566Z	INFO	operator.init	controller/controller.go:241	Starting workers	{"controller": "dns_controller", "worker count": 1}
2023-05-04T16:32:31.670245070Z 2023-05-04T16:32:31.670Z	INFO	operator.init	controller/controller.go:241	Starting workers	{"controller": "ingressclass_controller", "worker count": 1}
2023-05-04T16:32:31.670339377Z 2023-05-04T16:32:31.670Z	INFO	operator.ingressclass_controller	controller/controller.go:121	reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:32:31.670396494Z 2023-05-04T16:32:31.670Z	INFO	operator.init	controller/controller.go:241	Starting workers	{"controller": "configurable_route_controller", "worker count": 1}
2023-05-04T16:32:31.670462889Z 2023-05-04T16:32:31.670Z	INFO	operator.configurable_route_controller	controller/controller.go:121	reconciling	{"request": "/cluster"}
2023-05-04T16:32:31.670578125Z 2023-05-04T16:32:31.670Z	INFO	operator.init	controller/controller.go:241	Starting workers	{"controller": "clientca_configmap_controller", "worker count": 1}
2023-05-04T16:32:31.671401360Z 2023-05-04T16:32:31.670Z	INFO	operator.ingress_controller	handler/enqueue_mapped.go:80	queueing ingress	{"name": "default", "related": ""}
2023-05-04T16:32:31.682741077Z 2023-05-04T16:32:31.682Z	INFO	operator.init	controller/controller.go:241	Starting workers	{"controller": "ingress_controller", "worker count": 1}
2023-05-04T16:32:31.682897350Z 2023-05-04T16:32:31.682Z	INFO	operator.ingress_controller	controller/controller.go:121	reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:32:31.690127286Z 2023-05-04T16:32:31.684Z	INFO	operator.ingress_controller	handler/enqueue_mapped.go:80	queueing ingress	{"name": "default", "related": ""}
2023-05-04T16:32:31.847220672Z 2023-05-04T16:32:31.847Z	INFO	operator.ingress_controller	ingress/deployment.go:131	updated router deployment	{"namespace": "openshift-ingress", "name": "router-default", "diff": "  &v1.Deployment{\n  \tTypeMeta:   {},\n  \tObjectMeta: {Name: \"router-default\", Namespace: \"openshift-ingress\", UID: \"742e1977-ae7e-4547-b347-d895fd433f13\", ResourceVersion: \"629568\", ...},\n  \tSpec: v1.DeploymentSpec{\n  \t\tReplicas: &1,\n  \t\tSelector: &{MatchLabels: {\"ingresscontroller.operator.openshift.io/deployment-ingresscontroller\": \"default\"}},\n  \t\tTemplate: v1.PodTemplateSpec{\n  \t\t\tObjectMeta: {Labels: {\"ingresscontroller.operator.openshift.io/deployment-ingresscontroller\": \"default\", \"ingresscontroller.operator.openshift.io/hash\": \"6854c4f8dc\"}, Annotations: {\"target.workload.openshift.io/management\": `{\"effect\": \"PreferredDuringScheduling\"}`, \"unsupported.do-not-use.openshift.io/override-liveness-grace-period-seconds\": \"10\"}},\n  \t\t\tSpec: v1.PodSpec{\n  \t\t\t\tVolumes: []v1.Volume{\n  \t\t\t\t\t{Name: \"default-certificate\", VolumeSource: {Secret: &{SecretName: \"router-certs-default\", DefaultMode: &420}}},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"service-ca-bundle\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 16 identical fields\n  \t\t\t\t\t\t\tFC:        nil,\n  \t\t\t\t\t\t\tAzureFile: nil,\n  \t\t\t\t\t\t\tConfigMap: &v1.ConfigMapVolumeSource{\n  \t\t\t\t\t\t\t\tLocalObjectReference: {Name: \"service-ca-bundle\"},\n  \t\t\t\t\t\t\t\tItems:                {{Key: \"service-ca.crt\", Path: \"service-ca.crt\"}},\n- \t\t\t\t\t\t\t\tDefaultMode:          &420,\n+ \t\t\t\t\t\t\t\tDefaultMode:          nil,\n  \t\t\t\t\t\t\t\tOptional:             &false,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tVsphereVolume: nil,\n  \t\t\t\t\t\t\tQuobyte:       nil,\n  \t\t\t\t\t\t\t... // 8 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"stats-auth\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\t\tAWSElasticBlockStore: nil,\n  \t\t\t\t\t\t\tGitRepo:              nil,\n  \t\t\t\t\t\t\tSecret: &v1.SecretVolumeSource{\n  \t\t\t\t\t\t\t\tSecretName:  \"router-stats-default\",\n  \t\t\t\t\t\t\t\tItems:       nil,\n- \t\t\t\t\t\t\t\tDefaultMode: &420,\n+ \t\t\t\t\t\t\t\tDefaultMode: nil,\n  \t\t\t\t\t\t\t\tOptional:    nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tNFS:   nil,\n  \t\t\t\t\t\t\tISCSI: nil,\n  \t\t\t\t\t\t\t... // 21 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"metrics-certs\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\t\tAWSElasticBlockStore: nil,\n  \t\t\t\t\t\t\tGitRepo:              nil,\n  \t\t\t\t\t\t\tSecret: &v1.SecretVolumeSource{\n  \t\t\t\t\t\t\t\tSecretName:  \"router-metrics-certs-default\",\n  \t\t\t\t\t\t\t\tItems:       nil,\n- \t\t\t\t\t\t\t\tDefaultMode: &420,\n+ \t\t\t\t\t\t\t\tDefaultMode: nil,\n  \t\t\t\t\t\t\t\tOptional:    nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tNFS:   nil,\n  \t\t\t\t\t\t\tISCSI: nil,\n  \t\t\t\t\t\t\t... // 21 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t},\n  \t\t\t\tInitContainers: nil,\n  \t\t\t\tContainers: []v1.Container{\n  \t\t\t\t\t{\n  \t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\tArgs:       nil,\n  \t\t\t\t\t\tWorkingDir: \"\",\n  \t\t\t\t\t\tPorts: []v1.ContainerPort{\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"http\",\n- \t\t\t\t\t\t\t\tHostPort:      80,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 80,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"https\",\n- \t\t\t\t\t\t\t\tHostPort:      443,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 443,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"metrics\",\n- \t\t\t\t\t\t\t\tHostPort:      1936,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 1936,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tEnvFrom:       nil,\n  \t\t\t\t\t\tEnv:           {{Name: \"DEFAULT_CERTIFICATE_DIR\", Value: \"/etc/pki/tls/private\"}, {Name: \"DEFAULT_DESTINATION_CA_PATH\", Value: \"/var/run/configmaps/service-ca/service-ca.crt\"}, {Name: \"RELOAD_INTERVAL\", Value: \"5s\"}, {Name: \"ROUTER_ALLOW_WILDCARD_ROUTES\", Value: \"false\"}, ...},\n  \t\t\t\t\t\tResources:     {Requests: {s\"cpu\": {i: {...}, s: \"100m\", Format: \"DecimalSI\"}, s\"memory\": {i: {...}, Format: \"BinarySI\"}}},\n  \t\t\t\t\t\tVolumeMounts:  {{Name: \"default-certificate\", ReadOnly: true, MountPath: \"/etc/pki/tls/private\"}, {Name: \"service-ca-bundle\", ReadOnly: true, MountPath: \"/var/run/configmaps/service-ca\"}, {Name: \"stats-auth\", ReadOnly: true, MountPath: \"/var/lib/haproxy/conf/metrics-auth\"}, {Name: \"metrics-certs\", ReadOnly: true, MountPath: \"/etc/pki/tls/metrics-certs\"}},\n  \t\t\t\t\t\tVolumeDevices: nil,\n  \t\t\t\t\t\tLivenessProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n- \t\t\t\t\t\t\tPeriodSeconds:                 10,\n+ \t\t\t\t\t\t\tPeriodSeconds:                 0,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n- \t\t\t\t\t\t\tFailureThreshold:              3,\n+ \t\t\t\t\t\t\tFailureThreshold:              0,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tReadinessProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz/ready\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n- \t\t\t\t\t\t\tPeriodSeconds:                 10,\n+ \t\t\t\t\t\t\tPeriodSeconds:                 0,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n- \t\t\t\t\t\t\tFailureThreshold:              3,\n+ \t\t\t\t\t\t\tFailureThreshold:              0,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tStartupProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz/ready\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n  \t\t\t\t\t\t\tPeriodSeconds:                 1,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n  \t\t\t\t\t\t\tFailureThreshold:              120,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tLifecycle:              nil,\n  \t\t\t\t\t\tTerminationMessagePath: \"/dev/termination-log\",\n  \t\t\t\t\t\t... // 6 identical fields\n  \t\t\t\t\t},\n  \t\t\t\t},\n  \t\t\t\tEphemeralContainers: nil,\n  \t\t\t\tRestartPolicy:       \"Always\",\n  \t\t\t\t... // 32 identical fields\n  \t\t\t},\n  \t\t},\n  \t\tStrategy:        {Type: \"RollingUpdate\", RollingUpdate: &{MaxUnavailable: &{Type: 1, StrVal: \"25%\"}, MaxSurge: &{}}},\n  \t\tMinReadySeconds: 30,\n  \t\t... // 3 identical fields\n  \t},\n  \tStatus: {ObservedGeneration: 1, Replicas: 1, UpdatedReplicas: 1, UnavailableReplicas: 1, ...},\n  }\n"}
2023-05-04T16:32:32.099943030Z 2023-05-04T16:32:32.097Z	INFO	operator.status_controller	controller/controller.go:121	Reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:32:32.099943030Z 2023-05-04T16:32:32.097Z	INFO	operator.certificate_controller	controller/controller.go:121	Reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:32:32.099943030Z 2023-05-04T16:32:32.097Z	INFO	operator.ingressclass_controller	controller/controller.go:121	reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:32:32.102103663Z 2023-05-04T16:32:32.100Z	ERROR	operator.ingress_controller	controller/controller.go:121	got retryable error; requeueing	{"after": "59m59.999988499s", "error": "IngressController may become degraded soon: DeploymentReplicasAllAvailable=False"}
2023-05-04T16:32:32.102103663Z 2023-05-04T16:32:32.100Z	INFO	operator.ingress_controller	controller/controller.go:121	reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:32:32.237364766Z 2023-05-04T16:32:32.236Z	INFO	operator.status_controller	controller/controller.go:121	Reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:32:32.435078139Z 2023-05-04T16:32:32.434Z	INFO	operator.ingress_controller	ingress/deployment.go:131	updated router deployment	{"namespace": "openshift-ingress", "name": "router-default", "diff": "  &v1.Deployment{\n  \tTypeMeta:   {},\n  \tObjectMeta: {Name: \"router-default\", Namespace: \"openshift-ingress\", UID: \"742e1977-ae7e-4547-b347-d895fd433f13\", ResourceVersion: \"629568\", ...},\n  \tSpec: v1.DeploymentSpec{\n  \t\tReplicas: &1,\n  \t\tSelector: &{MatchLabels: {\"ingresscontroller.operator.openshift.io/deployment-ingresscontroller\": \"default\"}},\n  \t\tTemplate: v1.PodTemplateSpec{\n  \t\t\tObjectMeta: {Labels: {\"ingresscontroller.operator.openshift.io/deployment-ingresscontroller\": \"default\", \"ingresscontroller.operator.openshift.io/hash\": \"6854c4f8dc\"}, Annotations: {\"target.workload.openshift.io/management\": `{\"effect\": \"PreferredDuringScheduling\"}`, \"unsupported.do-not-use.openshift.io/override-liveness-grace-period-seconds\": \"10\"}},\n  \t\t\tSpec: v1.PodSpec{\n  \t\t\t\tVolumes: []v1.Volume{\n  \t\t\t\t\t{Name: \"default-certificate\", VolumeSource: {Secret: &{SecretName: \"router-certs-default\", DefaultMode: &420}}},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"service-ca-bundle\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 16 identical fields\n  \t\t\t\t\t\t\tFC:        nil,\n  \t\t\t\t\t\t\tAzureFile: nil,\n  \t\t\t\t\t\t\tConfigMap: &v1.ConfigMapVolumeSource{\n  \t\t\t\t\t\t\t\tLocalObjectReference: {Name: \"service-ca-bundle\"},\n  \t\t\t\t\t\t\t\tItems:                {{Key: \"service-ca.crt\", Path: \"service-ca.crt\"}},\n- \t\t\t\t\t\t\t\tDefaultMode:          &420,\n+ \t\t\t\t\t\t\t\tDefaultMode:          nil,\n  \t\t\t\t\t\t\t\tOptional:             &false,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tVsphereVolume: nil,\n  \t\t\t\t\t\t\tQuobyte:       nil,\n  \t\t\t\t\t\t\t... // 8 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"stats-auth\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\t\tAWSElasticBlockStore: nil,\n  \t\t\t\t\t\t\tGitRepo:              nil,\n  \t\t\t\t\t\t\tSecret: &v1.SecretVolumeSource{\n  \t\t\t\t\t\t\t\tSecretName:  \"router-stats-default\",\n  \t\t\t\t\t\t\t\tItems:       nil,\n- \t\t\t\t\t\t\t\tDefaultMode: &420,\n+ \t\t\t\t\t\t\t\tDefaultMode: nil,\n  \t\t\t\t\t\t\t\tOptional:    nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tNFS:   nil,\n  \t\t\t\t\t\t\tISCSI: nil,\n  \t\t\t\t\t\t\t... // 21 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"metrics-certs\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\t\tAWSElasticBlockStore: nil,\n  \t\t\t\t\t\t\tGitRepo:              nil,\n  \t\t\t\t\t\t\tSecret: &v1.SecretVolumeSource{\n  \t\t\t\t\t\t\t\tSecretName:  \"router-metrics-certs-default\",\n  \t\t\t\t\t\t\t\tItems:       nil,\n- \t\t\t\t\t\t\t\tDefaultMode: &420,\n+ \t\t\t\t\t\t\t\tDefaultMode: nil,\n  \t\t\t\t\t\t\t\tOptional:    nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tNFS:   nil,\n  \t\t\t\t\t\t\tISCSI: nil,\n  \t\t\t\t\t\t\t... // 21 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t},\n  \t\t\t\tInitContainers: nil,\n  \t\t\t\tContainers: []v1.Container{\n  \t\t\t\t\t{\n  \t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\tArgs:       nil,\n  \t\t\t\t\t\tWorkingDir: \"\",\n  \t\t\t\t\t\tPorts: []v1.ContainerPort{\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"http\",\n- \t\t\t\t\t\t\t\tHostPort:      80,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 80,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"https\",\n- \t\t\t\t\t\t\t\tHostPort:      443,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 443,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"metrics\",\n- \t\t\t\t\t\t\t\tHostPort:      1936,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 1936,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tEnvFrom:       nil,\n  \t\t\t\t\t\tEnv:           {{Name: \"DEFAULT_CERTIFICATE_DIR\", Value: \"/etc/pki/tls/private\"}, {Name: \"DEFAULT_DESTINATION_CA_PATH\", Value: \"/var/run/configmaps/service-ca/service-ca.crt\"}, {Name: \"RELOAD_INTERVAL\", Value: \"5s\"}, {Name: \"ROUTER_ALLOW_WILDCARD_ROUTES\", Value: \"false\"}, ...},\n  \t\t\t\t\t\tResources:     {Requests: {s\"cpu\": {i: {...}, s: \"100m\", Format: \"DecimalSI\"}, s\"memory\": {i: {...}, Format: \"BinarySI\"}}},\n  \t\t\t\t\t\tVolumeMounts:  {{Name: \"default-certificate\", ReadOnly: true, MountPath: \"/etc/pki/tls/private\"}, {Name: \"service-ca-bundle\", ReadOnly: true, MountPath: \"/var/run/configmaps/service-ca\"}, {Name: \"stats-auth\", ReadOnly: true, MountPath: \"/var/lib/haproxy/conf/metrics-auth\"}, {Name: \"metrics-certs\", ReadOnly: true, MountPath: \"/etc/pki/tls/metrics-certs\"}},\n  \t\t\t\t\t\tVolumeDevices: nil,\n  \t\t\t\t\t\tLivenessProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n- \t\t\t\t\t\t\tPeriodSeconds:                 10,\n+ \t\t\t\t\t\t\tPeriodSeconds:                 0,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n- \t\t\t\t\t\t\tFailureThreshold:              3,\n+ \t\t\t\t\t\t\tFailureThreshold:              0,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tReadinessProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz/ready\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n- \t\t\t\t\t\t\tPeriodSeconds:                 10,\n+ \t\t\t\t\t\t\tPeriodSeconds:                 0,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n- \t\t\t\t\t\t\tFailureThreshold:              3,\n+ \t\t\t\t\t\t\tFailureThreshold:              0,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tStartupProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz/ready\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n  \t\t\t\t\t\t\tPeriodSeconds:                 1,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n  \t\t\t\t\t\t\tFailureThreshold:              120,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tLifecycle:              nil,\n  \t\t\t\t\t\tTerminationMessagePath: \"/dev/termination-log\",\n  \t\t\t\t\t\t... // 6 identical fields\n  \t\t\t\t\t},\n  \t\t\t\t},\n  \t\t\t\tEphemeralContainers: nil,\n  \t\t\t\tRestartPolicy:       \"Always\",\n  \t\t\t\t... // 32 identical fields\n  \t\t\t},\n  \t\t},\n  \t\tStrategy:        {Type: \"RollingUpdate\", RollingUpdate: &{MaxUnavailable: &{Type: 1, StrVal: \"25%\"}, MaxSurge: &{}}},\n  \t\tMinReadySeconds: 30,\n  \t\t... // 3 identical fields\n  \t},\n  \tStatus: {ObservedGeneration: 1, Replicas: 1, UpdatedReplicas: 1, UnavailableReplicas: 1, ...},\n  }\n"}
2023-05-04T16:32:32.464732910Z 2023-05-04T16:32:32.464Z	ERROR	operator.ingress_controller	controller/controller.go:121	got retryable error; requeueing	{"after": "59m58.536896266s", "error": "IngressController may become degraded soon: DeploymentReplicasAllAvailable=False"}
2023-05-04T16:32:35.059414202Z 2023-05-04T16:32:35.059Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:32:42.311383696Z I0504 16:32:42.311341       1 request.go:682] Waited for 1.046530472s due to client-side throttling, not priority and fairness, request: GET:https://172.30.0.1:443/apis/monitoring.coreos.com/v1alpha1?timeout=32s
2023-05-04T16:32:45.058509130Z 2023-05-04T16:32:45.058Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:32:47.462334125Z 2023-05-04T16:32:47.462Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "failed to get restmapping: no matches for kind \"Route\" in group \"route.openshift.io\""}
2023-05-04T16:32:52.361303999Z I0504 16:32:52.361268       1 request.go:682] Waited for 1.093730974s due to client-side throttling, not priority and fairness, request: GET:https://172.30.0.1:443/apis/k8s.ovn.org/v1?timeout=32s
2023-05-04T16:32:55.059168314Z 2023-05-04T16:32:55.059Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:32:57.464927988Z 2023-05-04T16:32:57.464Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "failed to get restmapping: no matches for kind \"Route\" in group \"route.openshift.io\""}
2023-05-04T16:33:02.411804772Z I0504 16:33:02.411766       1 request.go:682] Waited for 1.144143505s due to client-side throttling, not priority and fairness, request: GET:https://172.30.0.1:443/apis/image.openshift.io/v1?timeout=32s
2023-05-04T16:33:05.059290121Z 2023-05-04T16:33:05.059Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:33:07.463234009Z 2023-05-04T16:33:07.463Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "failed to get restmapping: no matches for kind \"Route\" in group \"route.openshift.io\""}
2023-05-04T16:33:12.412401549Z I0504 16:33:12.412180       1 request.go:682] Waited for 1.147829901s due to client-side throttling, not priority and fairness, request: GET:https://172.30.0.1:443/apis/machine.openshift.io/v1?timeout=32s
2023-05-04T16:33:15.059283787Z 2023-05-04T16:33:15.059Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:33:17.463891073Z 2023-05-04T16:33:17.463Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "failed to get restmapping: no matches for kind \"Route\" in group \"route.openshift.io\""}
2023-05-04T16:33:22.469053640Z I0504 16:33:22.461115       1 request.go:682] Waited for 1.191497337s due to client-side throttling, not priority and fairness, request: GET:https://172.30.0.1:443/apis/metal3.io/v1alpha1?timeout=32s
2023-05-04T16:33:25.059166887Z 2023-05-04T16:33:25.059Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:33:27.972217312Z 2023-05-04T16:33:27.972Z	INFO	operator.init	controller/controller.go:241	Starting workers	{"controller": "canary_controller", "worker count": 1}
2023-05-04T16:33:30.685743380Z 2023-05-04T16:33:30.685Z	ERROR	operator.canary_controller	wait/wait.go:157	error performing canary route check	{"error": "error sending canary HTTP request to \"canary-openshift-ingress-canary.apps.sno.gw.lo\": Get \"https://canary-openshift-ingress-canary.apps.sno.gw.lo\": dial tcp 192.168.1.126:443: connect: connection refused"}
2023-05-04T16:33:35.058754753Z 2023-05-04T16:33:35.058Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:33:45.059426010Z 2023-05-04T16:33:45.059Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:33:54.377741187Z 2023-05-04T16:33:54.377Z	INFO	operator.ingress_controller	handler/enqueue_mapped.go:80	queueing ingress	{"name": "default", "related": ""}
2023-05-04T16:33:54.377741187Z 2023-05-04T16:33:54.377Z	INFO	operator.ingress_controller	handler/enqueue_mapped.go:80	queueing ingress	{"name": "default", "related": ""}
2023-05-04T16:33:54.377741187Z 2023-05-04T16:33:54.377Z	INFO	operator.ingress_controller	controller/controller.go:121	reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:33:54.660265554Z 2023-05-04T16:33:54.660Z	INFO	operator.ingress_controller	ingress/deployment.go:131	updated router deployment	{"namespace": "openshift-ingress", "name": "router-default", "diff": "  &v1.Deployment{\n  \tTypeMeta:   {},\n  \tObjectMeta: {Name: \"router-default\", Namespace: \"openshift-ingress\", UID: \"742e1977-ae7e-4547-b347-d895fd433f13\", ResourceVersion: \"631985\", ...},\n  \tSpec: v1.DeploymentSpec{\n  \t\tReplicas: &1,\n  \t\tSelector: &{MatchLabels: {\"ingresscontroller.operator.openshift.io/deployment-ingresscontroller\": \"default\"}},\n  \t\tTemplate: v1.PodTemplateSpec{\n  \t\t\tObjectMeta: {Labels: {\"ingresscontroller.operator.openshift.io/deployment-ingresscontroller\": \"default\", \"ingresscontroller.operator.openshift.io/hash\": \"6854c4f8dc\"}, Annotations: {\"target.workload.openshift.io/management\": `{\"effect\": \"PreferredDuringScheduling\"}`, \"unsupported.do-not-use.openshift.io/override-liveness-grace-period-seconds\": \"10\"}},\n  \t\t\tSpec: v1.PodSpec{\n  \t\t\t\tVolumes: []v1.Volume{\n  \t\t\t\t\t{Name: \"default-certificate\", VolumeSource: {Secret: &{SecretName: \"router-certs-default\", DefaultMode: &420}}},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"service-ca-bundle\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 16 identical fields\n  \t\t\t\t\t\t\tFC:        nil,\n  \t\t\t\t\t\t\tAzureFile: nil,\n  \t\t\t\t\t\t\tConfigMap: &v1.ConfigMapVolumeSource{\n  \t\t\t\t\t\t\t\tLocalObjectReference: {Name: \"service-ca-bundle\"},\n  \t\t\t\t\t\t\t\tItems:                {{Key: \"service-ca.crt\", Path: \"service-ca.crt\"}},\n- \t\t\t\t\t\t\t\tDefaultMode:          &420,\n+ \t\t\t\t\t\t\t\tDefaultMode:          nil,\n  \t\t\t\t\t\t\t\tOptional:             &false,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tVsphereVolume: nil,\n  \t\t\t\t\t\t\tQuobyte:       nil,\n  \t\t\t\t\t\t\t... // 8 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"stats-auth\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\t\tAWSElasticBlockStore: nil,\n  \t\t\t\t\t\t\tGitRepo:              nil,\n  \t\t\t\t\t\t\tSecret: &v1.SecretVolumeSource{\n  \t\t\t\t\t\t\t\tSecretName:  \"router-stats-default\",\n  \t\t\t\t\t\t\t\tItems:       nil,\n- \t\t\t\t\t\t\t\tDefaultMode: &420,\n+ \t\t\t\t\t\t\t\tDefaultMode: nil,\n  \t\t\t\t\t\t\t\tOptional:    nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tNFS:   nil,\n  \t\t\t\t\t\t\tISCSI: nil,\n  \t\t\t\t\t\t\t... // 21 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"metrics-certs\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\t\tAWSElasticBlockStore: nil,\n  \t\t\t\t\t\t\tGitRepo:              nil,\n  \t\t\t\t\t\t\tSecret: &v1.SecretVolumeSource{\n  \t\t\t\t\t\t\t\tSecretName:  \"router-metrics-certs-default\",\n  \t\t\t\t\t\t\t\tItems:       nil,\n- \t\t\t\t\t\t\t\tDefaultMode: &420,\n+ \t\t\t\t\t\t\t\tDefaultMode: nil,\n  \t\t\t\t\t\t\t\tOptional:    nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tNFS:   nil,\n  \t\t\t\t\t\t\tISCSI: nil,\n  \t\t\t\t\t\t\t... // 21 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t},\n  \t\t\t\tInitContainers: nil,\n  \t\t\t\tContainers: []v1.Container{\n  \t\t\t\t\t{\n  \t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\tArgs:       nil,\n  \t\t\t\t\t\tWorkingDir: \"\",\n  \t\t\t\t\t\tPorts: []v1.ContainerPort{\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"http\",\n- \t\t\t\t\t\t\t\tHostPort:      80,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 80,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"https\",\n- \t\t\t\t\t\t\t\tHostPort:      443,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 443,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"metrics\",\n- \t\t\t\t\t\t\t\tHostPort:      1936,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 1936,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tEnvFrom:       nil,\n  \t\t\t\t\t\tEnv:           {{Name: \"DEFAULT_CERTIFICATE_DIR\", Value: \"/etc/pki/tls/private\"}, {Name: \"DEFAULT_DESTINATION_CA_PATH\", Value: \"/var/run/configmaps/service-ca/service-ca.crt\"}, {Name: \"RELOAD_INTERVAL\", Value: \"5s\"}, {Name: \"ROUTER_ALLOW_WILDCARD_ROUTES\", Value: \"false\"}, ...},\n  \t\t\t\t\t\tResources:     {Requests: {s\"cpu\": {i: {...}, s: \"100m\", Format: \"DecimalSI\"}, s\"memory\": {i: {...}, Format: \"BinarySI\"}}},\n  \t\t\t\t\t\tVolumeMounts:  {{Name: \"default-certificate\", ReadOnly: true, MountPath: \"/etc/pki/tls/private\"}, {Name: \"service-ca-bundle\", ReadOnly: true, MountPath: \"/var/run/configmaps/service-ca\"}, {Name: \"stats-auth\", ReadOnly: true, MountPath: \"/var/lib/haproxy/conf/metrics-auth\"}, {Name: \"metrics-certs\", ReadOnly: true, MountPath: \"/etc/pki/tls/metrics-certs\"}},\n  \t\t\t\t\t\tVolumeDevices: nil,\n  \t\t\t\t\t\tLivenessProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n- \t\t\t\t\t\t\tPeriodSeconds:                 10,\n+ \t\t\t\t\t\t\tPeriodSeconds:                 0,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n- \t\t\t\t\t\t\tFailureThreshold:              3,\n+ \t\t\t\t\t\t\tFailureThreshold:              0,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tReadinessProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz/ready\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n- \t\t\t\t\t\t\tPeriodSeconds:                 10,\n+ \t\t\t\t\t\t\tPeriodSeconds:                 0,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n- \t\t\t\t\t\t\tFailureThreshold:              3,\n+ \t\t\t\t\t\t\tFailureThreshold:              0,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tStartupProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz/ready\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n  \t\t\t\t\t\t\tPeriodSeconds:                 1,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n  \t\t\t\t\t\t\tFailureThreshold:              120,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tLifecycle:              nil,\n  \t\t\t\t\t\tTerminationMessagePath: \"/dev/termination-log\",\n  \t\t\t\t\t\t... // 6 identical fields\n  \t\t\t\t\t},\n  \t\t\t\t},\n  \t\t\t\tEphemeralContainers: nil,\n  \t\t\t\tRestartPolicy:       \"Always\",\n  \t\t\t\t... // 32 identical fields\n  \t\t\t},\n  \t\t},\n  \t\tStrategy:        {Type: \"RollingUpdate\", RollingUpdate: &{MaxUnavailable: &{Type: 1, StrVal: \"25%\"}, MaxSurge: &{}}},\n  \t\tMinReadySeconds: 30,\n  \t\t... // 3 identical fields\n  \t},\n  \tStatus: {ObservedGeneration: 1, Replicas: 1, UpdatedReplicas: 1, ReadyReplicas: 1, ...},\n  }\n"}
2023-05-04T16:33:54.681208350Z 2023-05-04T16:33:54.681Z	ERROR	operator.ingress_controller	controller/controller.go:121	got retryable error; requeueing	{"after": "58m36.320099702s", "error": "IngressController may become degraded soon: DeploymentReplicasAllAvailable=False"}
2023-05-04T16:33:55.059129352Z 2023-05-04T16:33:55.059Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:34:05.058576774Z 2023-05-04T16:34:05.058Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:34:15.059437576Z 2023-05-04T16:34:15.059Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:34:24.422055452Z 2023-05-04T16:34:24.415Z	INFO	operator.ingress_controller	handler/enqueue_mapped.go:80	queueing ingress	{"name": "default", "related": ""}
2023-05-04T16:34:24.422055452Z 2023-05-04T16:34:24.415Z	INFO	operator.ingress_controller	handler/enqueue_mapped.go:80	queueing ingress	{"name": "default", "related": ""}
2023-05-04T16:34:24.422055452Z 2023-05-04T16:34:24.415Z	INFO	operator.ingress_controller	controller/controller.go:121	reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:34:24.524240277Z 2023-05-04T16:34:24.524Z	INFO	operator.ingress_controller	ingress/deployment.go:131	updated router deployment	{"namespace": "openshift-ingress", "name": "router-default", "diff": "  &v1.Deployment{\n  \tTypeMeta:   {},\n  \tObjectMeta: {Name: \"router-default\", Namespace: \"openshift-ingress\", UID: \"742e1977-ae7e-4547-b347-d895fd433f13\", ResourceVersion: \"632234\", ...},\n  \tSpec: v1.DeploymentSpec{\n  \t\tReplicas: &1,\n  \t\tSelector: &{MatchLabels: {\"ingresscontroller.operator.openshift.io/deployment-ingresscontroller\": \"default\"}},\n  \t\tTemplate: v1.PodTemplateSpec{\n  \t\t\tObjectMeta: {Labels: {\"ingresscontroller.operator.openshift.io/deployment-ingresscontroller\": \"default\", \"ingresscontroller.operator.openshift.io/hash\": \"6854c4f8dc\"}, Annotations: {\"target.workload.openshift.io/management\": `{\"effect\": \"PreferredDuringScheduling\"}`, \"unsupported.do-not-use.openshift.io/override-liveness-grace-period-seconds\": \"10\"}},\n  \t\t\tSpec: v1.PodSpec{\n  \t\t\t\tVolumes: []v1.Volume{\n  \t\t\t\t\t{Name: \"default-certificate\", VolumeSource: {Secret: &{SecretName: \"router-certs-default\", DefaultMode: &420}}},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"service-ca-bundle\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 16 identical fields\n  \t\t\t\t\t\t\tFC:        nil,\n  \t\t\t\t\t\t\tAzureFile: nil,\n  \t\t\t\t\t\t\tConfigMap: &v1.ConfigMapVolumeSource{\n  \t\t\t\t\t\t\t\tLocalObjectReference: {Name: \"service-ca-bundle\"},\n  \t\t\t\t\t\t\t\tItems:                {{Key: \"service-ca.crt\", Path: \"service-ca.crt\"}},\n- \t\t\t\t\t\t\t\tDefaultMode:          &420,\n+ \t\t\t\t\t\t\t\tDefaultMode:          nil,\n  \t\t\t\t\t\t\t\tOptional:             &false,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tVsphereVolume: nil,\n  \t\t\t\t\t\t\tQuobyte:       nil,\n  \t\t\t\t\t\t\t... // 8 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"stats-auth\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\t\tAWSElasticBlockStore: nil,\n  \t\t\t\t\t\t\tGitRepo:              nil,\n  \t\t\t\t\t\t\tSecret: &v1.SecretVolumeSource{\n  \t\t\t\t\t\t\t\tSecretName:  \"router-stats-default\",\n  \t\t\t\t\t\t\t\tItems:       nil,\n- \t\t\t\t\t\t\t\tDefaultMode: &420,\n+ \t\t\t\t\t\t\t\tDefaultMode: nil,\n  \t\t\t\t\t\t\t\tOptional:    nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tNFS:   nil,\n  \t\t\t\t\t\t\tISCSI: nil,\n  \t\t\t\t\t\t\t... // 21 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"metrics-certs\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\t\tAWSElasticBlockStore: nil,\n  \t\t\t\t\t\t\tGitRepo:              nil,\n  \t\t\t\t\t\t\tSecret: &v1.SecretVolumeSource{\n  \t\t\t\t\t\t\t\tSecretName:  \"router-metrics-certs-default\",\n  \t\t\t\t\t\t\t\tItems:       nil,\n- \t\t\t\t\t\t\t\tDefaultMode: &420,\n+ \t\t\t\t\t\t\t\tDefaultMode: nil,\n  \t\t\t\t\t\t\t\tOptional:    nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tNFS:   nil,\n  \t\t\t\t\t\t\tISCSI: nil,\n  \t\t\t\t\t\t\t... // 21 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t},\n  \t\t\t\tInitContainers: nil,\n  \t\t\t\tContainers: []v1.Container{\n  \t\t\t\t\t{\n  \t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\tArgs:       nil,\n  \t\t\t\t\t\tWorkingDir: \"\",\n  \t\t\t\t\t\tPorts: []v1.ContainerPort{\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"http\",\n- \t\t\t\t\t\t\t\tHostPort:      80,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 80,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"https\",\n- \t\t\t\t\t\t\t\tHostPort:      443,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 443,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"metrics\",\n- \t\t\t\t\t\t\t\tHostPort:      1936,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 1936,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tEnvFrom:       nil,\n  \t\t\t\t\t\tEnv:           {{Name: \"DEFAULT_CERTIFICATE_DIR\", Value: \"/etc/pki/tls/private\"}, {Name: \"DEFAULT_DESTINATION_CA_PATH\", Value: \"/var/run/configmaps/service-ca/service-ca.crt\"}, {Name: \"RELOAD_INTERVAL\", Value: \"5s\"}, {Name: \"ROUTER_ALLOW_WILDCARD_ROUTES\", Value: \"false\"}, ...},\n  \t\t\t\t\t\tResources:     {Requests: {s\"cpu\": {i: {...}, s: \"100m\", Format: \"DecimalSI\"}, s\"memory\": {i: {...}, Format: \"BinarySI\"}}},\n  \t\t\t\t\t\tVolumeMounts:  {{Name: \"default-certificate\", ReadOnly: true, MountPath: \"/etc/pki/tls/private\"}, {Name: \"service-ca-bundle\", ReadOnly: true, MountPath: \"/var/run/configmaps/service-ca\"}, {Name: \"stats-auth\", ReadOnly: true, MountPath: \"/var/lib/haproxy/conf/metrics-auth\"}, {Name: \"metrics-certs\", ReadOnly: true, MountPath: \"/etc/pki/tls/metrics-certs\"}},\n  \t\t\t\t\t\tVolumeDevices: nil,\n  \t\t\t\t\t\tLivenessProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n- \t\t\t\t\t\t\tPeriodSeconds:                 10,\n+ \t\t\t\t\t\t\tPeriodSeconds:                 0,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n- \t\t\t\t\t\t\tFailureThreshold:              3,\n+ \t\t\t\t\t\t\tFailureThreshold:              0,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tReadinessProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz/ready\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n- \t\t\t\t\t\t\tPeriodSeconds:                 10,\n+ \t\t\t\t\t\t\tPeriodSeconds:                 0,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n- \t\t\t\t\t\t\tFailureThreshold:              3,\n+ \t\t\t\t\t\t\tFailureThreshold:              0,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tStartupProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz/ready\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n  \t\t\t\t\t\t\tPeriodSeconds:                 1,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n  \t\t\t\t\t\t\tFailureThreshold:              120,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tLifecycle:              nil,\n  \t\t\t\t\t\tTerminationMessagePath: \"/dev/termination-log\",\n  \t\t\t\t\t\t... // 6 identical fields\n  \t\t\t\t\t},\n  \t\t\t\t},\n  \t\t\t\tEphemeralContainers: nil,\n  \t\t\t\tRestartPolicy:       \"Always\",\n  \t\t\t\t... // 32 identical fields\n  \t\t\t},\n  \t\t},\n  \t\tStrategy:        {Type: \"RollingUpdate\", RollingUpdate: &{MaxUnavailable: &{Type: 1, StrVal: \"25%\"}, MaxSurge: &{}}},\n  \t\tMinReadySeconds: 30,\n  \t\t... // 3 identical fields\n  \t},\n  \tStatus: {ObservedGeneration: 1, Replicas: 1, UpdatedReplicas: 1, ReadyReplicas: 1, ...},\n  }\n"}
2023-05-04T16:34:24.571639709Z 2023-05-04T16:34:24.571Z	INFO	operator.status_controller	controller/controller.go:121	Reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:34:24.573339850Z 2023-05-04T16:34:24.572Z	INFO	operator.certificate_controller	controller/controller.go:121	Reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:34:24.573339850Z 2023-05-04T16:34:24.572Z	INFO	operator.ingressclass_controller	controller/controller.go:121	reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:34:24.576164902Z 2023-05-04T16:34:24.576Z	INFO	operator.ingress_controller	controller/controller.go:121	reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:34:24.610389717Z 2023-05-04T16:34:24.609Z	INFO	operator.status_controller	controller/controller.go:121	Reconciling	{"request": "openshift-ingress-operator/default"}
2023-05-04T16:34:24.718746366Z 2023-05-04T16:34:24.718Z	INFO	operator.ingress_controller	ingress/deployment.go:131	updated router deployment	{"namespace": "openshift-ingress", "name": "router-default", "diff": "  &v1.Deployment{\n  \tTypeMeta:   {},\n  \tObjectMeta: {Name: \"router-default\", Namespace: \"openshift-ingress\", UID: \"742e1977-ae7e-4547-b347-d895fd433f13\", ResourceVersion: \"632234\", ...},\n  \tSpec: v1.DeploymentSpec{\n  \t\tReplicas: &1,\n  \t\tSelector: &{MatchLabels: {\"ingresscontroller.operator.openshift.io/deployment-ingresscontroller\": \"default\"}},\n  \t\tTemplate: v1.PodTemplateSpec{\n  \t\t\tObjectMeta: {Labels: {\"ingresscontroller.operator.openshift.io/deployment-ingresscontroller\": \"default\", \"ingresscontroller.operator.openshift.io/hash\": \"6854c4f8dc\"}, Annotations: {\"target.workload.openshift.io/management\": `{\"effect\": \"PreferredDuringScheduling\"}`, \"unsupported.do-not-use.openshift.io/override-liveness-grace-period-seconds\": \"10\"}},\n  \t\t\tSpec: v1.PodSpec{\n  \t\t\t\tVolumes: []v1.Volume{\n  \t\t\t\t\t{Name: \"default-certificate\", VolumeSource: {Secret: &{SecretName: \"router-certs-default\", DefaultMode: &420}}},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"service-ca-bundle\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 16 identical fields\n  \t\t\t\t\t\t\tFC:        nil,\n  \t\t\t\t\t\t\tAzureFile: nil,\n  \t\t\t\t\t\t\tConfigMap: &v1.ConfigMapVolumeSource{\n  \t\t\t\t\t\t\t\tLocalObjectReference: {Name: \"service-ca-bundle\"},\n  \t\t\t\t\t\t\t\tItems:                {{Key: \"service-ca.crt\", Path: \"service-ca.crt\"}},\n- \t\t\t\t\t\t\t\tDefaultMode:          &420,\n+ \t\t\t\t\t\t\t\tDefaultMode:          nil,\n  \t\t\t\t\t\t\t\tOptional:             &false,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tVsphereVolume: nil,\n  \t\t\t\t\t\t\tQuobyte:       nil,\n  \t\t\t\t\t\t\t... // 8 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"stats-auth\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\t\tAWSElasticBlockStore: nil,\n  \t\t\t\t\t\t\tGitRepo:              nil,\n  \t\t\t\t\t\t\tSecret: &v1.SecretVolumeSource{\n  \t\t\t\t\t\t\t\tSecretName:  \"router-stats-default\",\n  \t\t\t\t\t\t\t\tItems:       nil,\n- \t\t\t\t\t\t\t\tDefaultMode: &420,\n+ \t\t\t\t\t\t\t\tDefaultMode: nil,\n  \t\t\t\t\t\t\t\tOptional:    nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tNFS:   nil,\n  \t\t\t\t\t\t\tISCSI: nil,\n  \t\t\t\t\t\t\t... // 21 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\tName: \"metrics-certs\",\n  \t\t\t\t\t\tVolumeSource: v1.VolumeSource{\n  \t\t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\t\tAWSElasticBlockStore: nil,\n  \t\t\t\t\t\t\tGitRepo:              nil,\n  \t\t\t\t\t\t\tSecret: &v1.SecretVolumeSource{\n  \t\t\t\t\t\t\t\tSecretName:  \"router-metrics-certs-default\",\n  \t\t\t\t\t\t\t\tItems:       nil,\n- \t\t\t\t\t\t\t\tDefaultMode: &420,\n+ \t\t\t\t\t\t\t\tDefaultMode: nil,\n  \t\t\t\t\t\t\t\tOptional:    nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tNFS:   nil,\n  \t\t\t\t\t\t\tISCSI: nil,\n  \t\t\t\t\t\t\t... // 21 identical fields\n  \t\t\t\t\t\t},\n  \t\t\t\t\t},\n  \t\t\t\t},\n  \t\t\t\tInitContainers: nil,\n  \t\t\t\tContainers: []v1.Container{\n  \t\t\t\t\t{\n  \t\t\t\t\t\t... // 3 identical fields\n  \t\t\t\t\t\tArgs:       nil,\n  \t\t\t\t\t\tWorkingDir: \"\",\n  \t\t\t\t\t\tPorts: []v1.ContainerPort{\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"http\",\n- \t\t\t\t\t\t\t\tHostPort:      80,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 80,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"https\",\n- \t\t\t\t\t\t\t\tHostPort:      443,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 443,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t{\n  \t\t\t\t\t\t\t\tName:          \"metrics\",\n- \t\t\t\t\t\t\t\tHostPort:      1936,\n+ \t\t\t\t\t\t\t\tHostPort:      0,\n  \t\t\t\t\t\t\t\tContainerPort: 1936,\n  \t\t\t\t\t\t\t\tProtocol:      \"TCP\",\n  \t\t\t\t\t\t\t\tHostIP:        \"\",\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tEnvFrom:       nil,\n  \t\t\t\t\t\tEnv:           {{Name: \"DEFAULT_CERTIFICATE_DIR\", Value: \"/etc/pki/tls/private\"}, {Name: \"DEFAULT_DESTINATION_CA_PATH\", Value: \"/var/run/configmaps/service-ca/service-ca.crt\"}, {Name: \"RELOAD_INTERVAL\", Value: \"5s\"}, {Name: \"ROUTER_ALLOW_WILDCARD_ROUTES\", Value: \"false\"}, ...},\n  \t\t\t\t\t\tResources:     {Requests: {s\"cpu\": {i: {...}, s: \"100m\", Format: \"DecimalSI\"}, s\"memory\": {i: {...}, Format: \"BinarySI\"}}},\n  \t\t\t\t\t\tVolumeMounts:  {{Name: \"default-certificate\", ReadOnly: true, MountPath: \"/etc/pki/tls/private\"}, {Name: \"service-ca-bundle\", ReadOnly: true, MountPath: \"/var/run/configmaps/service-ca\"}, {Name: \"stats-auth\", ReadOnly: true, MountPath: \"/var/lib/haproxy/conf/metrics-auth\"}, {Name: \"metrics-certs\", ReadOnly: true, MountPath: \"/etc/pki/tls/metrics-certs\"}},\n  \t\t\t\t\t\tVolumeDevices: nil,\n  \t\t\t\t\t\tLivenessProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n- \t\t\t\t\t\t\tPeriodSeconds:                 10,\n+ \t\t\t\t\t\t\tPeriodSeconds:                 0,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n- \t\t\t\t\t\t\tFailureThreshold:              3,\n+ \t\t\t\t\t\t\tFailureThreshold:              0,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tReadinessProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz/ready\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n- \t\t\t\t\t\t\tPeriodSeconds:                 10,\n+ \t\t\t\t\t\t\tPeriodSeconds:                 0,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n- \t\t\t\t\t\t\tFailureThreshold:              3,\n+ \t\t\t\t\t\t\tFailureThreshold:              0,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tStartupProbe: &v1.Probe{\n  \t\t\t\t\t\t\tProbeHandler: v1.ProbeHandler{\n  \t\t\t\t\t\t\t\tExec: nil,\n  \t\t\t\t\t\t\t\tHTTPGet: &v1.HTTPGetAction{\n  \t\t\t\t\t\t\t\t\tPath:        \"/healthz/ready\",\n  \t\t\t\t\t\t\t\t\tPort:        {IntVal: 1936},\n  \t\t\t\t\t\t\t\t\tHost:        \"localhost\",\n- \t\t\t\t\t\t\t\t\tScheme:      \"HTTP\",\n+ \t\t\t\t\t\t\t\t\tScheme:      \"\",\n  \t\t\t\t\t\t\t\t\tHTTPHeaders: nil,\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t\tTCPSocket: nil,\n  \t\t\t\t\t\t\t\tGRPC:      nil,\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\tInitialDelaySeconds:           0,\n  \t\t\t\t\t\t\tTimeoutSeconds:                1,\n  \t\t\t\t\t\t\tPeriodSeconds:                 1,\n- \t\t\t\t\t\t\tSuccessThreshold:              1,\n+ \t\t\t\t\t\t\tSuccessThreshold:              0,\n  \t\t\t\t\t\t\tFailureThreshold:              120,\n  \t\t\t\t\t\t\tTerminationGracePeriodSeconds: nil,\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tLifecycle:              nil,\n  \t\t\t\t\t\tTerminationMessagePath: \"/dev/termination-log\",\n  \t\t\t\t\t\t... // 6 identical fields\n  \t\t\t\t\t},\n  \t\t\t\t},\n  \t\t\t\tEphemeralContainers: nil,\n  \t\t\t\tRestartPolicy:       \"Always\",\n  \t\t\t\t... // 32 identical fields\n  \t\t\t},\n  \t\t},\n  \t\tStrategy:        {Type: \"RollingUpdate\", RollingUpdate: &{MaxUnavailable: &{Type: 1, StrVal: \"25%\"}, MaxSurge: &{}}},\n  \t\tMinReadySeconds: 30,\n  \t\t... // 3 identical fields\n  \t},\n  \tStatus: {ObservedGeneration: 1, Replicas: 1, UpdatedReplicas: 1, ReadyReplicas: 1, ...},\n  }\n"}
2023-05-04T16:34:25.059334018Z 2023-05-04T16:34:25.059Z	ERROR	operator.init.controller-runtime.source	wait/wait.go:235	if kind is a CRD, it should be installed before calling Start	{"kind": "Route.route.openshift.io", "error": "no matches for kind \"Route\" in version \"route.openshift.io/v1\""}
2023-05-04T16:34:31.670596883Z 2023-05-04T16:34:31.670Z	ERROR	operator.init	controller/controller.go:215	Could not wait for Cache to sync	{"controller": "route_metrics_controller", "error": "failed to wait for route_metrics_controller caches to sync: timed out waiting for cache to be synced"}
2023-05-04T16:34:31.670635856Z 2023-05-04T16:34:31.670Z	INFO	operator.init	runtime/asm_amd64.s:1594	Stopping and waiting for non leader election runnables
2023-05-04T16:34:31.670635856Z 2023-05-04T16:34:31.670Z	INFO	operator.init	runtime/asm_amd64.s:1594	Stopping and waiting for leader election runnables
2023-05-04T16:34:31.670656545Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	Shutdown signal received, waiting for all workers to finish	{"controller": "canary_controller"}
2023-05-04T16:34:31.670677935Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	Shutdown signal received, waiting for all workers to finish	{"controller": "ingress_controller"}
2023-05-04T16:34:31.670677935Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	Shutdown signal received, waiting for all workers to finish	{"controller": "crl"}
2023-05-04T16:34:31.670685489Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	Shutdown signal received, waiting for all workers to finish	{"controller": "error_page_configmap_controller"}
2023-05-04T16:34:31.670685489Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	Shutdown signal received, waiting for all workers to finish	{"controller": "clientca_configmap_controller"}
2023-05-04T16:34:31.670690779Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	Shutdown signal received, waiting for all workers to finish	{"controller": "certificate_publisher_controller"}
2023-05-04T16:34:31.670695628Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	Shutdown signal received, waiting for all workers to finish	{"controller": "configurable_route_controller"}
2023-05-04T16:34:31.670695628Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	Shutdown signal received, waiting for all workers to finish	{"controller": "status_controller"}
2023-05-04T16:34:31.670700818Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	All workers finished	{"controller": "canary_controller"}
2023-05-04T16:34:31.670700818Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	Shutdown signal received, waiting for all workers to finish	{"controller": "ingressclass_controller"}
2023-05-04T16:34:31.670714364Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	Shutdown signal received, waiting for all workers to finish	{"controller": "certificate_controller"}
2023-05-04T16:34:31.670714364Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	All workers finished	{"controller": "ingressclass_controller"}
2023-05-04T16:34:31.670714364Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	Shutdown signal received, waiting for all workers to finish	{"controller": "dns_controller"}
2023-05-04T16:34:31.670714364Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	All workers finished	{"controller": "clientca_configmap_controller"}
2023-05-04T16:34:31.670714364Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	All workers finished	{"controller": "crl"}
2023-05-04T16:34:31.670714364Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	All workers finished	{"controller": "error_page_configmap_controller"}
2023-05-04T16:34:31.670714364Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	All workers finished	{"controller": "status_controller"}
2023-05-04T16:34:31.670722599Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	All workers finished	{"controller": "certificate_publisher_controller"}
2023-05-04T16:34:31.670722599Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	All workers finished	{"controller": "ingress_controller"}
2023-05-04T16:34:31.670722599Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	All workers finished	{"controller": "configurable_route_controller"}
2023-05-04T16:34:31.670722599Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	All workers finished	{"controller": "dns_controller"}
2023-05-04T16:34:31.670728690Z 2023-05-04T16:34:31.670Z	INFO	operator.init	manager/runnable_group.go:219	All workers finished	{"controller": "certificate_controller"}
2023-05-04T16:34:31.670748999Z 2023-05-04T16:34:31.670Z	INFO	operator.init	runtime/asm_amd64.s:1594	Stopping and waiting for caches
2023-05-04T16:34:31.671003737Z 2023-05-04T16:34:31.670Z	INFO	operator.init	runtime/asm_amd64.s:1594	Stopping and waiting for webhooks
2023-05-04T16:34:31.671012543Z 2023-05-04T16:34:31.671Z	INFO	operator.init	runtime/asm_amd64.s:1594	Wait completed, proceeding to shutdown the manager
2023-05-04T16:34:31.678087942Z 2023-05-04T16:34:31.678Z	ERROR	operator.main	cobra/command.go:860	error starting	{"error": "failed to wait for route_metrics_controller caches to sync: timed out waiting for cache to be synced"}
