---
apiVersion: monitoring.coreos.com/v1
items:
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:46:03Z"
    generation: 1
    labels:
      app.kubernetes.io/component: alert-router
      app.kubernetes.io/instance: main
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/part-of: openshift-monitoring
      app.kubernetes.io/version: 0.24.0
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:namespaceSelector: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:46:03Z"
    name: alertmanager-main
    namespace: openshift-monitoring
    resourceVersion: "16250"
    uid: fd0e430f-f869-46d7-a23e-606babd97c89
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      interval: 1m0s
      port: metrics
      scheme: https
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
        serverName: alertmanager-main.openshift-monitoring.svc
    namespaceSelector: {}
    selector:
      matchLabels:
        app.kubernetes.io/component: alert-router
        app.kubernetes.io/instance: main
        app.kubernetes.io/name: alertmanager
        app.kubernetes.io/part-of: openshift-monitoring
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:35:31Z"
    generation: 1
    labels:
      app.kubernetes.io/name: cluster-monitoring-operator
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/name: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:namespaceSelector: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:35:31Z"
    name: cluster-monitoring-operator
    namespace: openshift-monitoring
    resourceVersion: "7183"
    uid: 50a277c0-6894-466f-8204-731c5925da05
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      port: https
      scheme: https
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        serverName: cluster-monitoring-operator.openshift-monitoring.svc
    namespaceSelector: {}
    selector:
      matchLabels:
        app.kubernetes.io/name: cluster-monitoring-operator
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:35:31Z"
    generation: 1
    labels:
      app.kubernetes.io/name: etcd
      k8s-app: etcd
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/name: {}
            f:k8s-app: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:jobLabel: {}
          f:namespaceSelector:
            .: {}
            f:matchNames: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:35:31Z"
    name: etcd
    namespace: openshift-monitoring
    resourceVersion: "7099"
    uid: 73da76dc-2024-42e6-9d1b-2153d09564ff
  spec:
    endpoints:
    - bearerTokenSecret:
        key: ""
      interval: 1m0s
      port: etcd-metrics
      scheme: https
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/secrets/kube-etcd-client-certs/etcd-client-ca.crt
        cert: {}
        certFile: /etc/prometheus/secrets/kube-etcd-client-certs/etcd-client.crt
        keyFile: /etc/prometheus/secrets/kube-etcd-client-certs/etcd-client.key
    jobLabel: k8s-app
    namespaceSelector:
      matchNames:
      - openshift-etcd
    selector:
      matchLabels:
        k8s-app: etcd
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:35:38Z"
    generation: 1
    labels:
      app.kubernetes.io/component: exporter
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/part-of: openshift-monitoring
      app.kubernetes.io/version: 2.6.0
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:jobLabel: {}
          f:namespaceSelector: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:35:38Z"
    name: kube-state-metrics
    namespace: openshift-monitoring
    resourceVersion: "7274"
    uid: bbfa4d70-1211-43d8-b513-62227fc37704
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      honorLabels: true
      interval: 2m0s
      metricRelabelings:
      - action: labeldrop
        regex: instance
      port: https-main
      relabelings:
      - action: labeldrop
        regex: pod
      scheme: https
      scrapeTimeout: 1m
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
        serverName: kube-state-metrics.openshift-monitoring.svc
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      interval: 2m0s
      port: https-self
      scheme: https
      scrapeTimeout: 1m
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
        serverName: kube-state-metrics.openshift-monitoring.svc
    jobLabel: app.kubernetes.io/name
    namespaceSelector: {}
    selector:
      matchLabels:
        app.kubernetes.io/component: exporter
        app.kubernetes.io/name: kube-state-metrics
        app.kubernetes.io/part-of: openshift-monitoring
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:35:31Z"
    generation: 1
    labels:
      app.kubernetes.io/name: kubelet
      app.kubernetes.io/part-of: openshift-monitoring
      k8s-app: kubelet
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:k8s-app: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:jobLabel: {}
          f:namespaceSelector:
            .: {}
            f:matchNames: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:35:31Z"
    name: kubelet
    namespace: openshift-monitoring
    resourceVersion: "7093"
    uid: 47ef6e08-699a-4cb1-9777-9a8354ca4854
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      honorLabels: true
      interval: 1m0s
      metricRelabelings:
      - action: drop
        regex: kubelet_(pod_worker_latency_microseconds|pod_start_latency_microseconds|cgroup_manager_latency_microseconds|pod_worker_start_latency_microseconds|pleg_relist_latency_microseconds|pleg_relist_interval_microseconds|runtime_operations|runtime_operations_latency_microseconds|runtime_operations_errors|eviction_stats_age_microseconds|device_plugin_registration_count|device_plugin_alloc_latency_microseconds|network_plugin_operations_latency_microseconds)
        sourceLabels:
        - __name__
      - action: drop
        regex: scheduler_(e2e_scheduling_latency_microseconds|scheduling_algorithm_predicate_evaluation|scheduling_algorithm_priority_evaluation|scheduling_algorithm_preemption_evaluation|scheduling_algorithm_latency_microseconds|binding_latency_microseconds|scheduling_latency_seconds)
        sourceLabels:
        - __name__
      - action: drop
        regex: apiserver_(request_count|request_latencies|request_latencies_summary|dropped_requests|storage_data_key_generation_latencies_microseconds|storage_transformation_failures_total|storage_transformation_latencies_microseconds|proxy_tunnel_sync_latency_secs|longrunning_gauge|registered_watchers)
        sourceLabels:
        - __name__
      - action: drop
        regex: kubelet_docker_(operations|operations_latency_microseconds|operations_errors|operations_timeout)
        sourceLabels:
        - __name__
      - action: drop
        regex: reflector_(items_per_list|items_per_watch|list_duration_seconds|lists_total|short_watches_total|watch_duration_seconds|watches_total)
        sourceLabels:
        - __name__
      - action: drop
        regex: etcd_(helper_cache_hit_count|helper_cache_miss_count|helper_cache_entry_count|object_counts|request_cache_get_latencies_summary|request_cache_add_latencies_summary|request_latencies_summary)
        sourceLabels:
        - __name__
      - action: drop
        regex: transformation_(transformation_latencies_microseconds|failures_total)
        sourceLabels:
        - __name__
      - action: drop
        regex: (admission_quota_controller_adds|admission_quota_controller_depth|admission_quota_controller_longest_running_processor_microseconds|admission_quota_controller_queue_latency|admission_quota_controller_unfinished_work_seconds|admission_quota_controller_work_duration|APIServiceOpenAPIAggregationControllerQueue1_adds|APIServiceOpenAPIAggregationControllerQueue1_depth|APIServiceOpenAPIAggregationControllerQueue1_longest_running_processor_microseconds|APIServiceOpenAPIAggregationControllerQueue1_queue_latency|APIServiceOpenAPIAggregationControllerQueue1_retries|APIServiceOpenAPIAggregationControllerQueue1_unfinished_work_seconds|APIServiceOpenAPIAggregationControllerQueue1_work_duration|APIServiceRegistrationController_adds|APIServiceRegistrationController_depth|APIServiceRegistrationController_longest_running_processor_microseconds|APIServiceRegistrationController_queue_latency|APIServiceRegistrationController_retries|APIServiceRegistrationController_unfinished_work_seconds|APIServiceRegistrationController_work_duration|autoregister_adds|autoregister_depth|autoregister_longest_running_processor_microseconds|autoregister_queue_latency|autoregister_retries|autoregister_unfinished_work_seconds|autoregister_work_duration|AvailableConditionController_adds|AvailableConditionController_depth|AvailableConditionController_longest_running_processor_microseconds|AvailableConditionController_queue_latency|AvailableConditionController_retries|AvailableConditionController_unfinished_work_seconds|AvailableConditionController_work_duration|crd_autoregistration_controller_adds|crd_autoregistration_controller_depth|crd_autoregistration_controller_longest_running_processor_microseconds|crd_autoregistration_controller_queue_latency|crd_autoregistration_controller_retries|crd_autoregistration_controller_unfinished_work_seconds|crd_autoregistration_controller_work_duration|crdEstablishing_adds|crdEstablishing_depth|crdEstablishing_longest_running_processor_microseconds|crdEstablishing_queue_latency|crdEstablishing_retries|crdEstablishing_unfinished_work_seconds|crdEstablishing_work_duration|crd_finalizer_adds|crd_finalizer_depth|crd_finalizer_longest_running_processor_microseconds|crd_finalizer_queue_latency|crd_finalizer_retries|crd_finalizer_unfinished_work_seconds|crd_finalizer_work_duration|crd_naming_condition_controller_adds|crd_naming_condition_controller_depth|crd_naming_condition_controller_longest_running_processor_microseconds|crd_naming_condition_controller_queue_latency|crd_naming_condition_controller_retries|crd_naming_condition_controller_unfinished_work_seconds|crd_naming_condition_controller_work_duration|crd_openapi_controller_adds|crd_openapi_controller_depth|crd_openapi_controller_longest_running_processor_microseconds|crd_openapi_controller_queue_latency|crd_openapi_controller_retries|crd_openapi_controller_unfinished_work_seconds|crd_openapi_controller_work_duration|DiscoveryController_adds|DiscoveryController_depth|DiscoveryController_longest_running_processor_microseconds|DiscoveryController_queue_latency|DiscoveryController_retries|DiscoveryController_unfinished_work_seconds|DiscoveryController_work_duration|kubeproxy_sync_proxy_rules_latency_microseconds|non_structural_schema_condition_controller_adds|non_structural_schema_condition_controller_depth|non_structural_schema_condition_controller_longest_running_processor_microseconds|non_structural_schema_condition_controller_queue_latency|non_structural_schema_condition_controller_retries|non_structural_schema_condition_controller_unfinished_work_seconds|non_structural_schema_condition_controller_work_duration|rest_client_request_latency_seconds|storage_operation_errors_total|storage_operation_status_count)
        sourceLabels:
        - __name__
      port: https-metrics
      relabelings:
      - action: replace
        sourceLabels:
        - __metrics_path__
        targetLabel: metrics_path
      scheme: https
      scrapeTimeout: 30s
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/kubelet-serving-ca-bundle/ca-bundle.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      honorLabels: true
      honorTimestamps: false
      interval: 1m0s
      metricRelabelings:
      - action: drop
        regex: container_(network_tcp_usage_total|network_udp_usage_total|tasks_state|cpu_load_average_10s)
        sourceLabels:
        - __name__
      - action: drop
        regex: (container_spec_.*|container_file_descriptors|container_sockets|container_threads_max|container_threads|container_start_time_seconds|container_last_seen);;
        sourceLabels:
        - __name__
        - pod
        - namespace
      - action: drop
        regex: (container_blkio_device_usage_total);.+
        sourceLabels:
        - __name__
        - container
      - action: drop
        regex: container_memory_failures_total
        sourceLabels:
        - __name__
      - action: replace
        regex: container_fs_usage_bytes
        replacement: "true"
        sourceLabels:
        - __name__
        targetLabel: __tmp_keep_metric
      - action: drop
        regex: ;(container_fs_.*);.+
        sourceLabels:
        - __tmp_keep_metric
        - __name__
        - container
      - action: labeldrop
        regex: __tmp_keep_metric
      path: /metrics/cadvisor
      port: https-metrics
      relabelings:
      - action: replace
        sourceLabels:
        - __metrics_path__
        targetLabel: metrics_path
      scheme: https
      scrapeTimeout: 30s
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/kubelet-serving-ca-bundle/ca-bundle.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      honorLabels: true
      interval: 1m0s
      path: /metrics/probes
      port: https-metrics
      relabelings:
      - action: replace
        sourceLabels:
        - __metrics_path__
        targetLabel: metrics_path
      scheme: https
      scrapeTimeout: 30s
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/kubelet-serving-ca-bundle/ca-bundle.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
    - bearerTokenSecret:
        key: ""
      interval: 1m0s
      port: https-metrics
      relabelings:
      - action: replace
        regex: (.+)(?::\d+)
        replacement: $1:9537
        sourceLabels:
        - __address__
        targetLabel: __address__
      - action: replace
        replacement: crio
        sourceLabels:
        - endpoint
        targetLabel: endpoint
      - action: replace
        replacement: crio
        targetLabel: job
    jobLabel: k8s-app
    namespaceSelector:
      matchNames:
      - kube-system
    selector:
      matchLabels:
        k8s-app: kubelet
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:35:38Z"
    generation: 1
    labels:
      app.kubernetes.io/component: exporter
      app.kubernetes.io/name: node-exporter
      app.kubernetes.io/part-of: openshift-monitoring
      app.kubernetes.io/version: 1.4.0
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:jobLabel: {}
          f:namespaceSelector: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:35:38Z"
    name: node-exporter
    namespace: openshift-monitoring
    resourceVersion: "7278"
    uid: 7c35b377-64af-4ed8-9177-743c640d6c5b
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      interval: 30s
      port: https
      relabelings:
      - action: replace
        regex: (.*)
        replacement: $1
        sourceLabels:
        - __meta_kubernetes_pod_node_name
        targetLabel: instance
      scheme: https
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
        serverName: node-exporter.openshift-monitoring.svc
    jobLabel: app.kubernetes.io/name
    namespaceSelector: {}
    selector:
      matchLabels:
        app.kubernetes.io/component: exporter
        app.kubernetes.io/name: node-exporter
        app.kubernetes.io/part-of: openshift-monitoring
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:35:38Z"
    generation: 1
    labels:
      k8s-app: openshift-state-metrics
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:jobLabel: {}
          f:namespaceSelector: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:35:38Z"
    name: openshift-state-metrics
    namespace: openshift-monitoring
    resourceVersion: "7275"
    uid: 7d705c64-2355-4cc6-a491-78bdab59dfab
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      honorLabels: true
      interval: 2m0s
      port: https-main
      scheme: https
      scrapeTimeout: 2m
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        serverName: openshift-state-metrics.openshift-monitoring.svc
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      interval: 2m0s
      port: https-self
      scheme: https
      scrapeTimeout: 2m
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        serverName: openshift-state-metrics.openshift-monitoring.svc
    jobLabel: k8s-app
    namespaceSelector: {}
    selector:
      matchLabels:
        k8s-app: openshift-state-metrics
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:42:16Z"
    generation: 1
    labels:
      app.kubernetes.io/component: metrics-adapter
      app.kubernetes.io/name: prometheus-adapter
      app.kubernetes.io/part-of: openshift-monitoring
      app.kubernetes.io/version: 0.10.0
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:namespaceSelector: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:42:16Z"
    name: prometheus-adapter
    namespace: openshift-monitoring
    resourceVersion: "15050"
    uid: ebc6ffae-a8f4-44c8-b8d4-285e97839f2e
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      interval: 1m0s
      metricRelabelings:
      - action: drop
        regex: (apiserver_client_certificate_.*|apiserver_envelope_.*|apiserver_flowcontrol_.*|apiserver_storage_.*|apiserver_webhooks_.*|workqueue_.*)
        sourceLabels:
        - __name__
      port: https
      scheme: https
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
        serverName: prometheus-adapter.openshift-monitoring.svc
    namespaceSelector: {}
    selector:
      matchLabels:
        app.kubernetes.io/component: metrics-adapter
        app.kubernetes.io/name: prometheus-adapter
        app.kubernetes.io/part-of: openshift-monitoring
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:45:47Z"
    generation: 1
    labels:
      app.kubernetes.io/component: prometheus
      app.kubernetes.io/instance: k8s
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: openshift-monitoring
      app.kubernetes.io/version: 2.39.1
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:namespaceSelector: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:45:47Z"
    name: prometheus-k8s
    namespace: openshift-monitoring
    resourceVersion: "16059"
    uid: 80c80d86-0f91-45d2-8e50-947f422f52bd
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      interval: 1m0s
      port: metrics
      scheme: https
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
        serverName: prometheus-k8s.openshift-monitoring.svc
    namespaceSelector: {}
    selector:
      matchLabels:
        app.kubernetes.io/component: prometheus
        app.kubernetes.io/instance: k8s
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/part-of: openshift-monitoring
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:35:31Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/name: prometheus-operator
      app.kubernetes.io/part-of: openshift-monitoring
      app.kubernetes.io/version: 0.60.1
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:namespaceSelector: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:35:31Z"
    name: prometheus-operator
    namespace: openshift-monitoring
    resourceVersion: "7075"
    uid: eae23d72-d40a-4d56-b3ec-ac44a12066ef
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      honorLabels: true
      port: https
      scheme: https
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
        serverName: prometheus-operator.openshift-monitoring.svc
    namespaceSelector: {}
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/name: prometheus-operator
        app.kubernetes.io/part-of: openshift-monitoring
        app.kubernetes.io/version: 0.60.1
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:41:50Z"
    generation: 1
    labels:
      k8s-app: telemeter-client
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:jobLabel: {}
          f:namespaceSelector: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:41:50Z"
    name: telemeter-client
    namespace: openshift-monitoring
    resourceVersion: "14610"
    uid: 7ac23e01-af4d-452a-981e-f2243f42e9db
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      interval: 1m0s
      port: https
      scheme: https
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
        serverName: telemeter-client.openshift-monitoring.svc
    jobLabel: k8s-app
    namespaceSelector: {}
    selector:
      matchLabels:
        k8s-app: telemeter-client
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:45:58Z"
    generation: 1
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: thanos-querier
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: openshift-monitoring
      app.kubernetes.io/version: 0.28.1
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:namespaceSelector: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:45:58Z"
    name: thanos-querier
    namespace: openshift-monitoring
    resourceVersion: "16200"
    uid: aeb642d2-fb39-44f5-b05c-147bc03b6ea6
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      interval: 1m0s
      port: metrics
      scheme: https
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
        serverName: thanos-querier.openshift-monitoring.svc
    namespaceSelector: {}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-layer
        app.kubernetes.io/instance: thanos-querier
        app.kubernetes.io/name: thanos-query
        app.kubernetes.io/part-of: openshift-monitoring
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    creationTimestamp: "2023-05-02T12:45:47Z"
    generation: 1
    labels:
      app.kubernetes.io/component: thanos-sidecar
      app.kubernetes.io/instance: k8s
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: openshift-monitoring
      app.kubernetes.io/version: 2.39.1
    managedFields:
    - apiVersion: monitoring.coreos.com/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
        f:spec:
          .: {}
          f:endpoints: {}
          f:namespaceSelector: {}
          f:selector: {}
      manager: operator
      operation: Update
      time: "2023-05-02T12:45:47Z"
    name: thanos-sidecar
    namespace: openshift-monitoring
    resourceVersion: "16060"
    uid: fae6492b-a820-424c-b374-ea4981151332
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      bearerTokenSecret:
        key: ""
      interval: 1m0s
      port: thanos-proxy
      scheme: https
      tlsConfig:
        ca: {}
        caFile: /etc/prometheus/configmaps/serving-certs-ca-bundle/service-ca.crt
        cert: {}
        certFile: /etc/prometheus/secrets/metrics-client-certs/tls.crt
        keyFile: /etc/prometheus/secrets/metrics-client-certs/tls.key
        serverName: prometheus-k8s-thanos-sidecar.openshift-monitoring.svc
    namespaceSelector: {}
    selector:
      matchLabels:
        app.kubernetes.io/component: thanos-sidecar
kind: ServiceMonitorList
metadata:
  continue: ""
  resourceVersion: "684659"
